/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cdr.types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Reading extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6075273361494438567L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Reading\",\"namespace\":\"cdr.types\",\"fields\":[{\"name\":\"reading\",\"type\":\"float\"},{\"name\":\"meterSerial\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastUpdate\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"connect.version\":1,\"connect.name\":\"Reading\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Reading> ENCODER =
      new BinaryMessageEncoder<Reading>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Reading> DECODER =
      new BinaryMessageDecoder<Reading>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Reading> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Reading> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Reading> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Reading>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Reading to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Reading from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Reading instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Reading fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private float reading;
  private java.lang.String meterSerial;
  private long lastUpdate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Reading() {}

  /**
   * All-args constructor.
   * @param reading The new value for reading
   * @param meterSerial The new value for meterSerial
   * @param lastUpdate The new value for lastUpdate
   */
  public Reading(java.lang.Float reading, java.lang.String meterSerial, java.lang.Long lastUpdate) {
    this.reading = reading;
    this.meterSerial = meterSerial;
    this.lastUpdate = lastUpdate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reading;
    case 1: return meterSerial;
    case 2: return lastUpdate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reading = (java.lang.Float)value$; break;
    case 1: meterSerial = value$ != null ? value$.toString() : null; break;
    case 2: lastUpdate = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'reading' field.
   * @return The value of the 'reading' field.
   */
  public float getReading() {
    return reading;
  }



  /**
   * Gets the value of the 'meterSerial' field.
   * @return The value of the 'meterSerial' field.
   */
  public java.lang.String getMeterSerial() {
    return meterSerial;
  }



  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The value of the 'lastUpdate' field.
   */
  public long getLastUpdate() {
    return lastUpdate;
  }



  /**
   * Creates a new Reading RecordBuilder.
   * @return A new Reading RecordBuilder
   */
  public static cdr.types.Reading.Builder newBuilder() {
    return new cdr.types.Reading.Builder();
  }

  /**
   * Creates a new Reading RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Reading RecordBuilder
   */
  public static cdr.types.Reading.Builder newBuilder(cdr.types.Reading.Builder other) {
    if (other == null) {
      return new cdr.types.Reading.Builder();
    } else {
      return new cdr.types.Reading.Builder(other);
    }
  }

  /**
   * Creates a new Reading RecordBuilder by copying an existing Reading instance.
   * @param other The existing instance to copy.
   * @return A new Reading RecordBuilder
   */
  public static cdr.types.Reading.Builder newBuilder(cdr.types.Reading other) {
    if (other == null) {
      return new cdr.types.Reading.Builder();
    } else {
      return new cdr.types.Reading.Builder(other);
    }
  }

  /**
   * RecordBuilder for Reading instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Reading>
    implements org.apache.avro.data.RecordBuilder<Reading> {

    private float reading;
    private java.lang.String meterSerial;
    private long lastUpdate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cdr.types.Reading.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reading)) {
        this.reading = data().deepCopy(fields()[0].schema(), other.reading);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.meterSerial)) {
        this.meterSerial = data().deepCopy(fields()[1].schema(), other.meterSerial);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[2].schema(), other.lastUpdate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Reading instance
     * @param other The existing instance to copy.
     */
    private Builder(cdr.types.Reading other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.reading)) {
        this.reading = data().deepCopy(fields()[0].schema(), other.reading);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.meterSerial)) {
        this.meterSerial = data().deepCopy(fields()[1].schema(), other.meterSerial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[2].schema(), other.lastUpdate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'reading' field.
      * @return The value.
      */
    public float getReading() {
      return reading;
    }


    /**
      * Sets the value of the 'reading' field.
      * @param value The value of 'reading'.
      * @return This builder.
      */
    public cdr.types.Reading.Builder setReading(float value) {
      validate(fields()[0], value);
      this.reading = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reading' field has been set.
      * @return True if the 'reading' field has been set, false otherwise.
      */
    public boolean hasReading() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reading' field.
      * @return This builder.
      */
    public cdr.types.Reading.Builder clearReading() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'meterSerial' field.
      * @return The value.
      */
    public java.lang.String getMeterSerial() {
      return meterSerial;
    }


    /**
      * Sets the value of the 'meterSerial' field.
      * @param value The value of 'meterSerial'.
      * @return This builder.
      */
    public cdr.types.Reading.Builder setMeterSerial(java.lang.String value) {
      validate(fields()[1], value);
      this.meterSerial = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'meterSerial' field has been set.
      * @return True if the 'meterSerial' field has been set, false otherwise.
      */
    public boolean hasMeterSerial() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'meterSerial' field.
      * @return This builder.
      */
    public cdr.types.Reading.Builder clearMeterSerial() {
      meterSerial = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * @return The value.
      */
    public long getLastUpdate() {
      return lastUpdate;
    }


    /**
      * Sets the value of the 'lastUpdate' field.
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public cdr.types.Reading.Builder setLastUpdate(long value) {
      validate(fields()[2], value);
      this.lastUpdate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * @return This builder.
      */
    public cdr.types.Reading.Builder clearLastUpdate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Reading build() {
      try {
        Reading record = new Reading();
        record.reading = fieldSetFlags()[0] ? this.reading : (java.lang.Float) defaultValue(fields()[0]);
        record.meterSerial = fieldSetFlags()[1] ? this.meterSerial : (java.lang.String) defaultValue(fields()[1]);
        record.lastUpdate = fieldSetFlags()[2] ? this.lastUpdate : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Reading>
    WRITER$ = (org.apache.avro.io.DatumWriter<Reading>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Reading>
    READER$ = (org.apache.avro.io.DatumReader<Reading>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeFloat(this.reading);

    out.writeString(this.meterSerial);

    out.writeLong(this.lastUpdate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.reading = in.readFloat();

      this.meterSerial = in.readString();

      this.lastUpdate = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.reading = in.readFloat();
          break;

        case 1:
          this.meterSerial = in.readString();
          break;

        case 2:
          this.lastUpdate = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










